"""
API REST para el Sistema de Recuperaci√≥n Legal con Asesor GPT
Expone endpoints para realizar consultas legales y obtener asesoramiento.
"""
from fastapi import FastAPI, HTTPException, BackgroundTasks
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel, Field
from typing import List, Dict, Any, Optional
import asyncio
import os
import time
from datetime import datetime
import uvicorn
import openai
from openai import OpenAI
from dotenv import load_dotenv
from src.openai_question_classifier import EnhancedLegalSystemWithOpenAI


try:
    from src.api_integration import EnhancedAPIConsultaHandler
    INTELLIGENT_SYSTEM_AVAILABLE = True
    print("‚úÖ Sistema inteligente disponible")
except ImportError:
    INTELLIGENT_SYSTEM_AVAILABLE = False
    print("‚ö†Ô∏è Sistema inteligente no disponible, usando sistema tradicional")
# Cargar variables de entorno desde .env
load_dotenv()
enhanced_legal_system = None

# Flag para habilitar/deshabilitar el clasificador OpenAI
USE_OPENAI_CLASSIFIER = os.getenv("USE_OPENAI_CLASSIFIER", "true").lower() in ["true", "1", "t"]

# Importar m√≥dulos del sistema
from src.config_loader import load_config
from src.data_loader import load_json_data
from src.weaviate_utils import connect_weaviate
from src.neo4j_utils import connect_neo4j
from main import search_query_neutral, check_connections

# Configuraci√≥n de la aplicaci√≥n FastAPI
app = FastAPI(
    title="Sistema de Recuperaci√≥n Legal",
    description="API para b√∫squeda de documentos legales con asesoramiento GPT",
    version="1.0.0"
)

# Configurar CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # En producci√≥n, especificar dominios espec√≠ficos
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Solo necesitamos estos modelos ahora
class ConsultaRequest(BaseModel):
    query: str = Field(..., description="Consulta legal del usuario", min_length=10, max_length=1000)
    top_n: int = Field(default=15, description="N√∫mero m√°ximo de art√≠culos para an√°lisis", ge=1, le=50)

class ConsultaResponse(BaseModel):
    response: str  # Solo la respuesta de GPT como string

class HealthResponse(BaseModel):
    status: str
    timestamp: str
    services: Dict[str, bool]
    version: str

# Variables globales para conexiones y configuraci√≥n
config = None
weaviate_client = None
neo4j_driver = None
documents = None
openai_client = None

@app.on_event("startup")
async def startup_event():
    """Inicializar conexiones y cargar configuraci√≥n al iniciar la API."""
    global config, weaviate_client, neo4j_driver, documents, openai_client, enhanced_handler, enhanced_legal_system
    
    print("üöÄ Iniciando Sistema de Recuperaci√≥n Legal...")
    
    # ===== 1. CARGAR CONFIGURACI√ìN =====
    config_path = os.getenv("CONFIG_PATH", "config.yaml")
    config = load_config(config_path)
    if not config:
        raise Exception("No se pudo cargar la configuraci√≥n")
    
    # ===== 2. CONFIGURAR CLIENTE OPENAI =====
    openai_api_key = os.getenv("OPENAI_API_KEY")
    if not openai_api_key:
        print("‚ö†Ô∏è ADVERTENCIA: OPENAI_API_KEY no configurada. El asesoramiento GPT estar√° deshabilitado.")
        openai_client = None
    else:
        try:
            openai_client = OpenAI(api_key=openai_api_key)
            response = openai_client.models.list()
            print("‚úÖ Cliente OpenAI configurado correctamente")
        except Exception as e:
            print(f"‚ùå Error configurando OpenAI: {str(e)}")
            openai_client = None
    
    # ===== 3. VERIFICAR CONEXIONES A BASES DE DATOS =====
    try:
        weaviate_client, neo4j_driver = check_connections(config)
        print("‚úÖ Conexiones a bases de datos verificadas")
    except Exception as e:
        print(f"‚ö†Ô∏è Error en conexiones a BD: {str(e)}")
    
    # ===== 4. CARGAR DOCUMENTOS (ESTO FALTABA!) =====
    try:
        data_path = os.getenv("DATA_PATH", "data")
        documents = load_json_data(data_path)
        print(f"‚úÖ Cargados {len(documents)} documentos legales")
    except Exception as e:
        print(f"‚ö†Ô∏è Error cargando documentos: {str(e)}")
        documents = []
    
    # ===== 5. INICIALIZAR SISTEMA INTELIGENTE EXISTENTE =====
    if INTELLIGENT_SYSTEM_AVAILABLE:
        try:
            # Tu configuraci√≥n existente de Llama
            llama_config = {
                "ollama_model": "llama2",
                "ollama_url": "http://localhost:11434",
                "huggingface_api_key": os.getenv("HUGGINGFACE_API_KEY"),
                "local_model": "microsoft/DialoGPT-medium"
            }
            
            enhanced_handler = EnhancedAPIConsultaHandler(
                config=config,
                weaviate_client=weaviate_client,
                neo4j_driver=neo4j_driver,
                documents=documents,
                openai_client=openai_client,
                llama_config=llama_config
            )
            
            print("üß† Sistema inteligente de clasificaci√≥n inicializado")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Error inicializando sistema inteligente: {str(e)}")
            print("üîÑ Continuando con sistema tradicional")
            enhanced_handler = None
    
    # ===== 6. NUEVO: INICIALIZAR CLASIFICADOR OPENAI =====
    if openai_client:
        try:
            classifier_config = {
                "use_openai_classifier": True,   # Activar OpenAI
                "use_llama_fallback": False,     # Desactivar Llama por ahora (para Mac)
                "openai_model": "gpt-4o-mini"   # Modelo econ√≥mico
            }
            
            enhanced_legal_system = EnhancedLegalSystemWithOpenAI(
                config=classifier_config,
                openai_client=openai_client
            )
            
            print("ü§ñ Clasificador de preguntas OpenAI inicializado")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Error inicializando clasificador OpenAI: {str(e)}")
            enhanced_legal_system = None
    else:
        print("‚ö†Ô∏è Clasificador OpenAI no disponible (sin API key)")
        enhanced_legal_system = None
    
    print("üéâ Sistema inicializado correctamente")

@app.on_event("shutdown")
async def shutdown_event():
    """Cerrar conexiones al terminar la API."""
    global neo4j_driver
    
    if neo4j_driver:
        neo4j_driver.close()
        print("üîí Conexiones cerradas correctamente")

def generate_gpt_advice(query: str, articles: List[Dict[str, Any]]) -> str:
    """
    Generar asesoramiento legal usando GPT basado en los art√≠culos encontrados.
    Retorna solo el texto de la respuesta.
    """
    if not openai_client:
        return "Lo siento, el servicio de asesoramiento legal no est√° disponible en este momento. Por favor, consulte con un abogado especializado."
    
    try:
        # Preparar contexto con los art√≠culos m√°s relevantes
        relevant_articles_text = ""
        
        # Usar m√°ximo 8 art√≠culos para evitar exceder l√≠mites de tokens
        top_articles = articles[:8]
        
        for i, article in enumerate(top_articles, 1):
            law_name = article.get('law_name', 'Ley no especificada')
            article_num = article.get('article_number', 'N/A')
            content = article.get('content', '')[:600]  # Limitar contenido
            
            relevant_articles_text += f"\n--- Art√≠culo {i} ({law_name} - Art. {article_num}) ---\n{content}\n"
        
        # Crear prompt optimizado para GPT
        system_prompt = """Eres un asistente legal especializado en derecho argentino. Proporciona asesoramiento legal claro y pr√°ctico basado √öNICAMENTE en los art√≠culos de ley proporcionados.

INSTRUCCIONES:
- Analiza la situaci√≥n legal del usuario
- Explica qu√© derechos le asisten seg√∫n los art√≠culos
- Proporciona recomendaciones espec√≠ficas y pasos a seguir
- Cita espec√≠ficamente los art√≠culos que respaldan tu an√°lisis
- Usa un lenguaje claro y accesible
- Incluye advertencias sobre plazos legales importantes
- Termina con un disclaimer apropiado

FORMATO DE RESPUESTA:
1. An√°lisis de la situaci√≥n
2. Derechos que le asisten
3. Recomendaciones espec√≠ficas
4. Pasos a seguir
5. Advertencias importantes
6. Disclaimer legal"""

        user_prompt = f"""CONSULTA: "{query}"

ART√çCULOS LEGALES APLICABLES:
{relevant_articles_text}

Proporciona un an√°lisis legal completo y recomendaciones pr√°cticas bas√°ndote exclusivamente en estos art√≠culos."""

        # Llamar a la API de OpenAI
        response = openai_client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_prompt}
            ],
            max_tokens=1200,
            temperature=0.2,  # Respuestas m√°s consistentes y precisas
            timeout=30.0
        )
        
        return response.choices[0].message.content.strip()
        
    except Exception as e:
        print(f"Error generando asesoramiento GPT: {str(e)}")
        return f"Lo siento, hubo un error al generar el asesoramiento legal. Error t√©cnico: {str(e)}. Por favor, consulte con un abogado especializado para obtener asesoramiento espec√≠fico sobre su situaci√≥n."

@app.get("/", response_model=Dict[str, str])
async def root():
    """Endpoint ra√≠z con informaci√≥n b√°sica de la API."""
    return {
        "message": "Sistema de Recuperaci√≥n Legal - API REST",
        "version": "1.0.0",
        "documentation": "/docs",
        "health": "/health"
    }

@app.get("/health", response_model=HealthResponse)
async def health_check():
    """Verificar el estado de salud del sistema y sus conexiones."""
    services_status = {
        "weaviate": weaviate_client is not None,
        "neo4j": neo4j_driver is not None,
        "openai": openai_client is not None,
        "documents_loaded": documents is not None and len(documents) > 0
    }
    
    overall_status = "healthy" if all([
        services_status["documents_loaded"],
        any([services_status["weaviate"], services_status["neo4j"]])  # Al menos una BD funcionando
    ]) else "degraded"
    
    return HealthResponse(
        status=overall_status,
        timestamp=datetime.now().isoformat(),
        services=services_status,
        version="1.0.0"
    )

@app.post("/consulta", response_model=ConsultaResponse)
async def realizar_consulta(request: ConsultaRequest):
    """
    Realizar una consulta legal con clasificaci√≥n autom√°tica opcional.
    """
    start_time = time.time()
    
    try:
        # ===== VALIDACIONES EXISTENTES =====
        if not documents:
            return ConsultaResponse(
                response="Lo siento, el sistema no est√° disponible en este momento. Los documentos legales no se han cargado correctamente."
            )
        
        if not weaviate_client and not neo4j_driver:
            return ConsultaResponse(
                response="Lo siento, el sistema de b√∫squeda no est√° disponible. Por favor, contacte al administrador."
            )
        
        if not openai_client:
            return ConsultaResponse(
                response="Lo siento, el servicio de asesoramiento legal no est√° disponible en este momento. La API de OpenAI no est√° configurada."
            )
        
        print(f"üîç Procesando consulta: '{request.query}'")
        
        # ===== NUEVO: CLASIFICAR PREGUNTA (OPCIONAL) =====
        dialogue_title = "Consulta Legal"  # T√≠tulo por defecto
        question_type = "legal_advice"      # Tipo por defecto
        
        if enhanced_legal_system:
            try:
                print("ü§ñ Clasificando pregunta con OpenAI...")
                classification_result = enhanced_legal_system.classify_question_smart(request.query)
                question_type = classification_result['question_type']
                dialogue_title = classification_result['dialogue_title']
                
                print(f"   üìã Clasificada como: {question_type}")
                print(f"   üìù T√≠tulo: {dialogue_title}")
                
            except Exception as e:
                print(f"   ‚ö†Ô∏è Error en clasificaci√≥n: {str(e)}")
                # Continuar sin clasificaci√≥n
        else:
            print("ü§ñ Clasificador no disponible, usando flujo tradicional")
        
        # ===== USAR TU SISTEMA EXISTENTE =====
        # Intentar con sistema inteligente primero
        if INTELLIGENT_SYSTEM_AVAILABLE and enhanced_handler:
            try:
                print("üß† Usando sistema inteligente...")
                intelligent_response = enhanced_handler.process_intelligent_consulta(
                    request.query, request.top_n
                )
                
                # Agregar t√≠tulo si hay clasificaci√≥n
                if dialogue_title != "Consulta Legal":
                    final_response = f"**{dialogue_title}**\n\n{intelligent_response}"
                else:
                    final_response = intelligent_response
                
                execution_time = time.time() - start_time
                print(f"‚úÖ Consulta inteligente procesada en {execution_time:.2f}s")
                
                return ConsultaResponse(response=final_response)
                
            except Exception as e:
                print(f"‚ö†Ô∏è Error en sistema inteligente: {str(e)}")
                print("üîÑ Fallback a sistema tradicional...")
        
        # ===== FALLBACK: SISTEMA TRADICIONAL =====
        print("‚öñÔ∏è Usando sistema tradicional...")
        
        # Modificar configuraci√≥n temporalmente
        temp_config = config.copy()
        temp_config.setdefault("retrieval", {})["top_n"] = request.top_n
        
        # Ejecutar b√∫squeda tradicional
        search_results = search_query_neutral(
            request.query, 
            temp_config, 
            weaviate_client, 
            neo4j_driver, 
            documents
        )
        
        if not search_results:
            return ConsultaResponse(
                response=f"**{dialogue_title}**\n\nNo se encontraron art√≠culos legales relevantes para su consulta. Le recomiendo reformular su pregunta o consultar directamente con un abogado especializado."
            )
        
        # Generar asesoramiento GPT tradicional
        print("ü§ñ Generando asesoramiento con GPT tradicional...")
        gpt_response = generate_gpt_advice(request.query, search_results)
        
        # Agregar t√≠tulo si hay clasificaci√≥n
        if dialogue_title != "Consulta Legal":
            final_response = f"**{dialogue_title}**\n\n{gpt_response}"
        else:
            final_response = gpt_response
        
        execution_time = time.time() - start_time
        print(f"‚úÖ Consulta tradicional procesada en {execution_time:.2f}s")
        
        return ConsultaResponse(response=final_response)
        
    except Exception as e:
        print(f"‚ùå Error procesando consulta: {str(e)}")
        return ConsultaResponse(
            response=f"Lo siento, ocurri√≥ un error al procesar su consulta: {str(e)}. Por favor, intente nuevamente o consulte con un abogado especializado."
        )


async def generate_adapted_gpt_response(query: str, articles: List[Dict[str, Any]], 
                                      question_type: str, dialogue_title: str) -> str:
    """
    Generar asesoramiento legal usando GPT adaptado al tipo de pregunta.
    """
    if not openai_client:
        return f"**{dialogue_title}**\n\nLo siento, el servicio de asesoramiento legal no est√° disponible en este momento."
    
    try:
        # Preparar contexto con los art√≠culos
        relevant_articles_text = ""
        top_articles = articles[:8]  # M√°ximo 8 art√≠culos
        
        for i, article in enumerate(top_articles, 1):
            law_name = article.get('law_name', 'Ley no especificada')
            article_num = article.get('article_number', 'N/A')
            content = article.get('content', '')[:600]
            
            relevant_articles_text += f"\n--- Art√≠culo {i} ({law_name} - Art. {article_num}) ---\n{content}\n"
        
        # ===== PROMPTS ADAPTADOS SEG√öN TIPO DE PREGUNTA =====
        
        if question_type == "articles_search":
            # Para b√∫squeda de art√≠culos espec√≠ficos
            system_prompt = """Eres un experto jurista argentino especializado en explicar art√≠culos legales espec√≠ficos. 

INSTRUCCIONES:
- Explica claramente el contenido del art√≠culo solicitado
- Proporciona el texto completo y su interpretaci√≥n
- Explica en qu√© situaciones aplica
- Usa lenguaje claro y accesible
- Cita exactamente los art√≠culos encontrados

FORMATO:
üìÑ **ART√çCULO SOLICITADO**
[Explicaci√≥n del art√≠culo espec√≠fico]

üí° **INTERPRETACI√ìN**
[Qu√© significa en t√©rminos pr√°cticos]

üîç **CU√ÅNDO APLICA**
[Situaciones donde es relevante]

‚ö†Ô∏è **CONSIDERACIONES IMPORTANTES**
[Aspectos clave a tener en cuenta]"""

        elif question_type == "case_analysis":
            # Para an√°lisis de casos personales
            system_prompt = """Eres un abogado especializado en derecho argentino que analiza casos personales espec√≠ficos.

INSTRUCCIONES:
- Analiza la situaci√≥n legal del usuario con profundidad
- Identifica qu√© derechos le asisten seg√∫n los art√≠culos
- Proporciona recomendaciones espec√≠ficas y pasos concretos
- Incluye informaci√≥n sobre plazos legales cr√≠ticos
- Considera el contexto emocional y urgencia
- Proporciona informaci√≥n sobre recursos disponibles

FORMATO:
üîç **AN√ÅLISIS DE SU SITUACI√ìN**
[An√°lisis detallado de la situaci√≥n legal]

‚öñÔ∏è **SUS DERECHOS**
[Derechos espec√≠ficos con base legal]

üìã **RECOMENDACIONES ESPEC√çFICAS**
[Acciones concretas a tomar]

‚è∞ **PLAZOS IMPORTANTES**
[Plazos legales cr√≠ticos]

üÜò **PR√ìXIMOS PASOS**
[Pasos espec√≠ficos ordenados por prioridad]

‚ö†Ô∏è **ADVERTENCIAS LEGALES**
[Advertencias sobre plazos y riesgos]"""

        else:  # legal_advice (consulta general)
            # Para consultas generales educativas
            system_prompt = """Eres un experto en derecho argentino que proporciona informaci√≥n educativa clara y pr√°ctica.

INSTRUCCIONES:
- Proporciona informaci√≥n educativa completa
- Explica conceptos legales de manera accesible
- Incluye ejemplos pr√°cticos relevantes
- Menciona los aspectos m√°s importantes
- Proporciona una base s√≥lida para entender el tema

FORMATO:
üìö **INFORMACI√ìN LEGAL**
[Explicaci√≥n completa del tema]

üí° **CONCEPTOS CLAVE**
[Conceptos fundamentales explicados]

üìñ **BASE LEGAL**
[Art√≠culos y leyes que respaldan la informaci√≥n]

üîç **EJEMPLOS PR√ÅCTICOS**
[Ejemplos que ilustren los conceptos]

üìã **PUNTOS IMPORTANTES**
[Aspectos clave a recordar]

‚û°Ô∏è **SIGUIENTES PASOS**
[Qu√© hacer si necesita m√°s informaci√≥n espec√≠fica]"""
        
        user_prompt = f"""CONSULTA: "{query}"

ART√çCULOS LEGALES APLICABLES:
{relevant_articles_text}

Por favor, proporciona una respuesta completa bas√°ndote exclusivamente en estos art√≠culos y tu conocimiento del derecho argentino."""

        # Llamar a OpenAI con el prompt adaptado
        response = openai_client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_prompt}
            ],
            max_tokens=1200,
            temperature=0.2,
            timeout=30.0
        )
        
        gpt_content = response.choices[0].message.content.strip()
        
        # Agregar t√≠tulo al inicio
        final_response = f"**{dialogue_title}**\n\n{gpt_content}"
        
        # Agregar disclaimer al final
        final_response += f"\n\n---\nüíº **Disclaimer Legal**: Esta informaci√≥n es de car√°cter educativo. Para asesoramiento espec√≠fico sobre su situaci√≥n, consulte con un abogado especializado."
        
        return final_response
        
    except Exception as e:
        print(f"Error generando respuesta adaptada: {str(e)}")
        return f"**{dialogue_title}**\n\nLo siento, hubo un error al generar el asesoramiento legal. Error: {str(e)}. Por favor, consulte con un abogado especializado."

@app.get("/consulta/ejemplo")
async def ejemplo_consulta():
    """Endpoint con ejemplos de consultas para testing."""
    ejemplos = {
        "consultas_ejemplo": [
            "fui despedida sin indemnizaci√≥n por estar embarazada",
            "me hacen trabajar m√°s de 8 horas sin pagar extras",
            "mi jefe me discrimina por mi edad",
            "no me pagaron la liquidaci√≥n final",
            "puedo divorciarme sin el consentimiento de mi esposo",
            "mi vecino construy√≥ en mi terreno"
        ],
        "formato_request": {
            "query": "tu consulta legal aqu√≠",
            "top_n": 15
        },
        "respuesta": "Solo texto del asesoramiento legal de GPT",
        "ejemplo_curl": """curl -X POST "http://localhost:8000/consulta" \\
     -H "Content-Type: application/json" \\
     -d '{"query": "fui despedida por embarazo", "top_n": 10}'"""
    }
    return ejemplos

@app.get("/stats")
async def obtener_estadisticas():
    """Obtener estad√≠sticas del sistema."""
    if not documents:
        return {"error": "No hay documentos cargados"}
    
    # Calcular estad√≠sticas b√°sicas
    total_docs = len(documents)
    laws = set()
    categories = set()
    
    for doc in documents:
        if doc.get('law_name'):
            laws.add(doc['law_name'])
        if doc.get('category'):
            categories.add(doc['category'])
    
    return {
        "total_documentos": total_docs,
        "total_leyes": len(laws),
        "total_categorias": len(categories),
        "leyes_disponibles": list(laws),
        "categorias_disponibles": list(categories),
        "servicios_activos": {
            "weaviate": weaviate_client is not None,
            "neo4j": neo4j_driver is not None,
            "openai": openai_client is not None
        }
    }


@app.get("/sistema/status")
async def sistema_status():
    """Estado del sistema inteligente vs tradicional."""
    status = {
        "sistema_tradicional": {
            "disponible": bool(documents and openai_client),
            "documentos_cargados": len(documents) if documents else 0,
            "openai_configurado": bool(openai_client),
            "weaviate_disponible": bool(weaviate_client),
            "neo4j_disponible": bool(neo4j_driver)
        },
        "sistema_inteligente": {
            "disponible": INTELLIGENT_SYSTEM_AVAILABLE and bool(enhanced_handler),
            "llama_status": None
        }
    }
    
    if enhanced_handler:
        try:
            status["sistema_inteligente"]["llama_status"] = enhanced_handler.intelligent_system.get_llama_status()
        except:
            status["sistema_inteligente"]["llama_status"] = "Error obteniendo status"
    
    return status

@app.post("/sistema/clasificar")
async def solo_clasificar(request: dict):
    """Solo clasificar la consulta sin ejecutar b√∫squeda completa."""
    if not enhanced_handler:
        return {"error": "Sistema inteligente no disponible"}
    
    try:
        query = request.get("query", "")
        if not query:
            return {"error": "Query requerido"}
        
        # Solo clasificar, no buscar
        classification_result = enhanced_handler.intelligent_system.process_query_with_real_llama(query)
        
        return {
            "query": query,
            "tipo_detectado": classification_result["classification"]["query_type"],
            "urgencia": classification_result["classification"]["urgency_level"],
            "confianza": classification_result["classification"]["confidence"],
            "dominios_legales": classification_result["classification"]["legal_domains"],
            "especialista_recomendado": classification_result["specialist_routing"]["specialist_type"],
            "metodo_clasificacion": classification_result["classification"].get("classification_method", "unknown"),
            "llama_usado": classification_result.get("llama_available", False)
        }
    except Exception as e:
        return {"error": f"Error en clasificaci√≥n: {str(e)}"}

if __name__ == "__main__":
    # Configuraci√≥n para desarrollo
    port = int(os.getenv("PORT", 3500))  # Cambiado a puerto 3500 para evitar conflictos
    host = os.getenv("HOST", "0.0.0.0")
    
    print(f"üöÄ Iniciando servidor en {host}:{port}")
    print(f"üìñ Documentaci√≥n disponible en: http://localhost:{port}/docs")
    print(f"üîç Ejemplo de consulta: http://localhost:{port}/consulta/ejemplo")
    
    uvicorn.run(
        "api:app",  # Usando el nombre correcto del archivo actual
        host=host,
        port=port,
        reload=True,  # Solo para desarrollo
        log_level="info"
    )