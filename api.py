"""
API REST para el Sistema de Recuperaci√≥n Legal con Asesor GPT
Expone endpoints para realizar consultas legales y obtener asesoramiento.
"""
from fastapi import FastAPI, HTTPException, BackgroundTasks
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel, Field
from typing import List, Dict, Any, Optional
import asyncio
import os
import time
from datetime import datetime
import uvicorn
import openai
from openai import OpenAI
from dotenv import load_dotenv

# Cargar variables de entorno desde .env
load_dotenv()

# Importar m√≥dulos del sistema
from src.config_loader import load_config
from src.data_loader import load_json_data
from src.weaviate_utils import connect_weaviate
from src.neo4j_utils import connect_neo4j
from main import search_query_neutral, check_connections

# Configuraci√≥n de la aplicaci√≥n FastAPI
app = FastAPI(
    title="Sistema de Recuperaci√≥n Legal",
    description="API para b√∫squeda de documentos legales con asesoramiento GPT",
    version="1.0.0"
)

# Configurar CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # En producci√≥n, especificar dominios espec√≠ficos
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Solo necesitamos estos modelos ahora
class ConsultaRequest(BaseModel):
    query: str = Field(..., description="Consulta legal del usuario", min_length=10, max_length=1000)
    top_n: int = Field(default=15, description="N√∫mero m√°ximo de art√≠culos para an√°lisis", ge=1, le=50)

class ConsultaResponse(BaseModel):
    response: str  # Solo la respuesta de GPT como string

class HealthResponse(BaseModel):
    status: str
    timestamp: str
    services: Dict[str, bool]
    version: str

# Variables globales para conexiones y configuraci√≥n
config = None
weaviate_client = None
neo4j_driver = None
documents = None
openai_client = None

@app.on_event("startup")
async def startup_event():
    """Inicializar conexiones y cargar configuraci√≥n al iniciar la API."""
    global config, weaviate_client, neo4j_driver, documents, openai_client
    
    print("üöÄ Iniciando Sistema de Recuperaci√≥n Legal...")
    
    # Cargar configuraci√≥n
    config_path = os.getenv("CONFIG_PATH", "config.yaml")
    config = load_config(config_path)
    if not config:
        raise Exception("No se pudo cargar la configuraci√≥n")
    
    # Configurar cliente OpenAI
    openai_api_key = os.getenv("OPENAI_API_KEY")
    if not openai_api_key:
        print("‚ö†Ô∏è ADVERTENCIA: OPENAI_API_KEY no configurada. El asesoramiento GPT estar√° deshabilitado.")
        openai_client = None
    else:
        try:
            openai_client = OpenAI(api_key=openai_api_key)
            # Probar conexi√≥n
            response = openai_client.models.list()
            print("‚úÖ Cliente OpenAI configurado correctamente")
        except Exception as e:
            print(f"‚ùå Error configurando OpenAI: {str(e)}")
            openai_client = None
    
    # Verificar conexiones a bases de datos
    try:
        weaviate_client, neo4j_driver = check_connections(config)
        print("‚úÖ Conexiones a bases de datos verificadas")
    except Exception as e:
        print(f"‚ö†Ô∏è Error en conexiones a BD: {str(e)}")
    
    # Cargar documentos
    try:
        data_path = os.getenv("DATA_PATH", "data")
        documents = load_json_data(data_path)
        print(f"‚úÖ Cargados {len(documents)} documentos legales")
    except Exception as e:
        print(f"‚ö†Ô∏è Error cargando documentos: {str(e)}")
        documents = []
    
    print("üéâ Sistema inicializado correctamente")

@app.on_event("shutdown")
async def shutdown_event():
    """Cerrar conexiones al terminar la API."""
    global neo4j_driver
    
    if neo4j_driver:
        neo4j_driver.close()
        print("üîí Conexiones cerradas correctamente")

async def generate_gpt_advice(query: str, articles: List[Dict[str, Any]]) -> str:
    """
    Generar asesoramiento legal usando GPT basado en los art√≠culos encontrados.
    Retorna solo el texto de la respuesta.
    """
    if not openai_client:
        return "Lo siento, el servicio de asesoramiento legal no est√° disponible en este momento. Por favor, consulte con un abogado especializado."
    
    try:
        # Preparar contexto con los art√≠culos m√°s relevantes
        relevant_articles_text = ""
        
        # Usar m√°ximo 8 art√≠culos para evitar exceder l√≠mites de tokens
        top_articles = articles[:8]
        
        for i, article in enumerate(top_articles, 1):
            law_name = article.get('law_name', 'Ley no especificada')
            article_num = article.get('article_number', 'N/A')
            content = article.get('content', '')[:600]  # Limitar contenido
            
            relevant_articles_text += f"\n--- Art√≠culo {i} ({law_name} - Art. {article_num}) ---\n{content}\n"
        
        # Crear prompt optimizado para GPT
        system_prompt = """Eres un asistente legal especializado en derecho argentino. Proporciona asesoramiento legal claro y pr√°ctico basado √öNICAMENTE en los art√≠culos de ley proporcionados.

INSTRUCCIONES:
- Analiza la situaci√≥n legal del usuario
- Explica qu√© derechos le asisten seg√∫n los art√≠culos
- Proporciona recomendaciones espec√≠ficas y pasos a seguir
- Cita espec√≠ficamente los art√≠culos que respaldan tu an√°lisis
- Usa un lenguaje claro y accesible
- Incluye advertencias sobre plazos legales importantes
- Termina con un disclaimer apropiado

FORMATO DE RESPUESTA:
1. An√°lisis de la situaci√≥n
2. Derechos que le asisten
3. Recomendaciones espec√≠ficas
4. Pasos a seguir
5. Advertencias importantes
6. Disclaimer legal"""

        user_prompt = f"""CONSULTA: "{query}"

ART√çCULOS LEGALES APLICABLES:
{relevant_articles_text}

Proporciona un an√°lisis legal completo y recomendaciones pr√°cticas bas√°ndote exclusivamente en estos art√≠culos."""

        # Llamar a la API de OpenAI
        response = openai_client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_prompt}
            ],
            max_tokens=1200,
            temperature=0.2,  # Respuestas m√°s consistentes y precisas
            timeout=30.0
        )
        
        return response.choices[0].message.content.strip()
        
    except Exception as e:
        print(f"Error generando asesoramiento GPT: {str(e)}")
        return f"Lo siento, hubo un error al generar el asesoramiento legal. Error t√©cnico: {str(e)}. Por favor, consulte con un abogado especializado para obtener asesoramiento espec√≠fico sobre su situaci√≥n."

@app.get("/", response_model=Dict[str, str])
async def root():
    """Endpoint ra√≠z con informaci√≥n b√°sica de la API."""
    return {
        "message": "Sistema de Recuperaci√≥n Legal - API REST",
        "version": "1.0.0",
        "documentation": "/docs",
        "health": "/health"
    }

@app.get("/health", response_model=HealthResponse)
async def health_check():
    """Verificar el estado de salud del sistema y sus conexiones."""
    services_status = {
        "weaviate": weaviate_client is not None,
        "neo4j": neo4j_driver is not None,
        "openai": openai_client is not None,
        "documents_loaded": documents is not None and len(documents) > 0
    }
    
    overall_status = "healthy" if all([
        services_status["documents_loaded"],
        any([services_status["weaviate"], services_status["neo4j"]])  # Al menos una BD funcionando
    ]) else "degraded"
    
    return HealthResponse(
        status=overall_status,
        timestamp=datetime.now().isoformat(),
        services=services_status,
        version="1.0.0"
    )

@app.post("/consulta", response_model=ConsultaResponse)
async def realizar_consulta(request: ConsultaRequest):
    """
    Realizar una consulta legal y obtener asesoramiento GPT.
    Retorna solo la respuesta del asesor legal.
    """
    start_time = time.time()
    
    try:
        # Validar que el sistema est√© funcionando
        if not documents:
            return ConsultaResponse(
                response="Lo siento, el sistema no est√° disponible en este momento. Los documentos legales no se han cargado correctamente."
            )
        
        if not weaviate_client and not neo4j_driver:
            return ConsultaResponse(
                response="Lo siento, el sistema de b√∫squeda no est√° disponible. Por favor, contacte al administrador."
            )
        
        if not openai_client:
            return ConsultaResponse(
                response="Lo siento, el servicio de asesoramiento legal no est√° disponible en este momento. La API de OpenAI no est√° configurada."
            )
        
        # Realizar b√∫squeda usando el sistema existente
        print(f"üîç Procesando consulta: '{request.query}'")
        
        # Modificar configuraci√≥n temporalmente
        temp_config = config.copy()
        temp_config.setdefault("retrieval", {})["top_n"] = request.top_n
        
        # Ejecutar b√∫squeda
        search_results = search_query_neutral(
            request.query, 
            temp_config, 
            weaviate_client, 
            neo4j_driver, 
            documents
        )
        
        if not search_results:
            return ConsultaResponse(
                response="No se encontraron art√≠culos legales relevantes para su consulta. Le recomiendo reformular su pregunta o consultar directamente con un abogado especializado."
            )
        
        # Generar asesoramiento GPT
        print("ü§ñ Generando asesoramiento con GPT...")
        gpt_response = await generate_gpt_advice(request.query, search_results)
        
        execution_time = time.time() - start_time
        print(f"‚úÖ Consulta procesada en {execution_time:.2f}s")
        
        return ConsultaResponse(response=gpt_response)
        
    except Exception as e:
        print(f"‚ùå Error procesando consulta: {str(e)}")
        return ConsultaResponse(
            response=f"Lo siento, ocurri√≥ un error al procesar su consulta: {str(e)}. Por favor, intente nuevamente o consulte con un abogado especializado."
        )

@app.get("/consulta/ejemplo")
async def ejemplo_consulta():
    """Endpoint con ejemplos de consultas para testing."""
    ejemplos = {
        "consultas_ejemplo": [
            "fui despedida sin indemnizaci√≥n por estar embarazada",
            "me hacen trabajar m√°s de 8 horas sin pagar extras",
            "mi jefe me discrimina por mi edad",
            "no me pagaron la liquidaci√≥n final",
            "puedo divorciarme sin el consentimiento de mi esposo",
            "mi vecino construy√≥ en mi terreno"
        ],
        "formato_request": {
            "query": "tu consulta legal aqu√≠",
            "top_n": 15
        },
        "respuesta": "Solo texto del asesoramiento legal de GPT",
        "ejemplo_curl": """curl -X POST "http://localhost:8000/consulta" \\
     -H "Content-Type: application/json" \\
     -d '{"query": "fui despedida por embarazo", "top_n": 10}'"""
    }
    return ejemplos

@app.get("/stats")
async def obtener_estadisticas():
    """Obtener estad√≠sticas del sistema."""
    if not documents:
        return {"error": "No hay documentos cargados"}
    
    # Calcular estad√≠sticas b√°sicas
    total_docs = len(documents)
    laws = set()
    categories = set()
    
    for doc in documents:
        if doc.get('law_name'):
            laws.add(doc['law_name'])
        if doc.get('category'):
            categories.add(doc['category'])
    
    return {
        "total_documentos": total_docs,
        "total_leyes": len(laws),
        "total_categorias": len(categories),
        "leyes_disponibles": list(laws),
        "categorias_disponibles": list(categories),
        "servicios_activos": {
            "weaviate": weaviate_client is not None,
            "neo4j": neo4j_driver is not None,
            "openai": openai_client is not None
        }
    }

if __name__ == "__main__":
    # Configuraci√≥n para desarrollo
    port = int(os.getenv("PORT", 3500))  # Cambiado a puerto 3500 para evitar conflictos
    host = os.getenv("HOST", "0.0.0.0")
    
    print(f"üöÄ Iniciando servidor en {host}:{port}")
    print(f"üìñ Documentaci√≥n disponible en: http://localhost:{port}/docs")
    print(f"üîç Ejemplo de consulta: http://localhost:{port}/consulta/ejemplo")
    
    uvicorn.run(
        "api:app",  # Usando el nombre correcto del archivo actual
        host=host,
        port=port,
        reload=True,  # Solo para desarrollo
        log_level="info"
    )